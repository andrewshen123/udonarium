/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$debug', '$match', '$+', '$[]', '$roll', '$!', '$nil?', '$>', '$to_i', '$>=']);
  return (function($base, $super, $parent_nesting) {
    function $NinjaSlayer(){};
    var self = $NinjaSlayer = $klass($base, $super, 'NinjaSlayer', $NinjaSlayer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NinjaSlayer_initialize_1, TMP_NinjaSlayer_gameName_2, TMP_NinjaSlayer_gameType_3, TMP_NinjaSlayer_getHelpMessage_4, TMP_NinjaSlayer_changeText_5, TMP_NinjaSlayer_rollDiceCommand_6;

    
    self.$setPrefixes(["NJ\\d+.*", "EV\\d+.*", "AT\\d+.*"]);
    
    Opal.defn(self, '$initialize', TMP_NinjaSlayer_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_NinjaSlayer_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_NinjaSlayer_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NinjaSlayer_initialize_1, false), $zuper, $iter);
      return (self.defaultSuccessTarget = ">=4");
    }, TMP_NinjaSlayer_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_NinjaSlayer_gameName_2 = function $$gameName() {
      var self = this;

      return "ニンジャスレイヤーTRPG"
    }, TMP_NinjaSlayer_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_NinjaSlayer_gameType_3 = function $$gameType() {
      var self = this;

      return "NinjaSlayer"
    }, TMP_NinjaSlayer_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_NinjaSlayer_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・通常判定　NJ\n" + "　NJx[y] or NJx@y or NJx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4)\n" + "　例:NJ4@H 難易度HARD、判定ダイス4で判定\n" + "・回避判定　EV\n" + "　EVx[y]/z or EVx@y/z or EVx/z or EVx\n" + "　x=判定ダイス y=難易度 z=攻撃側の成功数(省略可) 難易度を省略時はNORMAL(4)\n" + "　攻撃側の成功数を指定した場合、カウンターカラテ発生時には表示\n" + "　例:EV5/3 難易度NORMAL(省略時)、判定ダイス5、攻撃側の成功数3で判定\n" + "・近接攻撃　AT\n" + "　ATx[y] or ATx@y or ATx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4) サツバツ！発生時には表示\n" + "　例:AT6[H] 難易度HARD,判定ダイス5で近接攻撃の判定\n" + "\n" + "・難易度\n" + "　KIDS=K,EASY=E,NORMAL=N,HARD=H,ULTRA HARD=UH 数字にも対応\n"
    }, TMP_NinjaSlayer_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$changeText', TMP_NinjaSlayer_changeText_5 = function $$changeText(str) {
      var self = this, kids_pattern = nil, easy_pattern = nil, normal_pattern = nil, hard_pattern = nil, ultrahard_pattern = nil, short_pattern = nil, m = nil;

      
      kids_pattern = /^(?:nj)(\d+)(?:@|\[)?[k2](?:\])?/i;
      easy_pattern = /^(?:nj)(\d+)(?:@|\[)?[e3](?:\])?/i;
      normal_pattern = /^(?:nj)(\d+)(?:@|\[)?[n4](?:\])?/i;
      hard_pattern = /^(?:nj)(\d+)(?:@|\[)?[h5](?:\])?/i;
      ultrahard_pattern = /^(?:nj)(\d+)(?:@|\[)?(?:uh|6)(?:\])?/i;
      short_pattern = /^(?:nj)(\d+)$/i;
      self.$debug("src word: ", str);
      if ($truthy((m = kids_pattern.$match(str)))) {
        
        self.$debug("nj kids: ", str);
        return $rb_plus(m['$[]'](1), "B6>=2");
      } else if ($truthy((m = easy_pattern.$match(str)))) {
        
        self.$debug("nj easy: ", str);
        return $rb_plus(m['$[]'](1), "B6>=3");
      } else if ($truthy((m = normal_pattern.$match(str)))) {
        
        self.$debug("nj normal: ", str);
        return $rb_plus(m['$[]'](1), "B6>=4");
      } else if ($truthy((m = hard_pattern.$match(str)))) {
        
        self.$debug("nj hard: ", str);
        return $rb_plus(m['$[]'](1), "B6>=5");
      } else if ($truthy((m = ultrahard_pattern.$match(str)))) {
        
        self.$debug("nj ultrahard: ", str);
        return $rb_plus(m['$[]'](1), "B6>=6");
      } else if ($truthy((m = short_pattern.$match(str)))) {
        
        self.$debug("nj short: ", str);
        return $rb_plus(m['$[]'](1), "B6>=4");
        } else {
        
        self.$debug("else: ", str);
        return str;
      };
    }, TMP_NinjaSlayer_changeText_5.$$arity = 1);
    return (Opal.defn(self, '$rollDiceCommand', TMP_NinjaSlayer_rollDiceCommand_6 = function $$rollDiceCommand(command) {
      var $a, self = this, result = nil, ev_kids_pattern = nil, ev_easy_pattern = nil, ev_normal_pattern = nil, ev_hard_pattern = nil, ev_ultrahard_pattern = nil, ev_short_pattern = nil, at_kids_pattern = nil, at_easy_pattern = nil, at_normal_pattern = nil, at_hard_pattern = nil, at_ultrahard_pattern = nil, at_short_pattern = nil, m = nil, dice_cnt = nil, suc_rate = nil, dice = nil, dice_str = nil, suc_cnt = nil, counter_karate = nil, satsubatsu = nil, six_cnt = nil;

      
      self.$debug("rollDiceCommand begin string", command);
      result = "";
      ev_kids_pattern = /^(?:ev)(\d+)(?:@|\[)?[k2](?:\])?(?:\/)?(\d+)?/i;
      ev_easy_pattern = /^(?:ev)(\d+)(?:@|\[)?[e3](?:\])?(?:\/)?(\d+)?/i;
      ev_normal_pattern = /^(?:ev)(\d+)(?:@|\[)?[n4](?:\])?(?:\/)?(\d+)?/i;
      ev_hard_pattern = /^(?:ev)(\d+)(?:@|\[)?[h5](?:\])?(?:\/)?(\d+)?/i;
      ev_ultrahard_pattern = /^(?:ev)(\d+)(?:@|\[)?(?:uh|6)(?:\])?(?:\/)?(\d+)?/i;
      ev_short_pattern = /^(?:ev)(\d+)(?:\/)?(\d+)?$/i;
      at_kids_pattern = /^(?:at)(\d+)(?:@|\[)?[k2](?:\])?/i;
      at_easy_pattern = /^(?:at)(\d+)(?:@|\[)?[e3](?:\])?/i;
      at_normal_pattern = /^(?:at)(\d+)(?:@|\[)?[n4](?:\])?/i;
      at_hard_pattern = /^(?:at)(\d+)(?:@|\[)?[h5](?:\])?/i;
      at_ultrahard_pattern = /^(?:at)(\d+)(?:@|\[)?(?:uh|6)(?:\])?/i;
      at_short_pattern = /^(?:at)(\d+)$/i;
      if ($truthy((m = ev_kids_pattern.$match(command)))) {
        
        self.$debug("ev kids: ", command);
        dice_cnt = m['$[]'](1);
        suc_rate = ($truthy($a = suc_rate) ? $a : m['$[]'](2));
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 2);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        counter_karate = false;
        if ($truthy(($truthy($a = suc_rate['$nil?']()['$!']()) ? $rb_gt(suc_cnt, suc_rate.$to_i()) : $a))) {
          
          self.$debug("counter karate: true");
          counter_karate = true;};
        result = $rb_plus(result, "" + "(" + (m['$[]'](1)) + "B6>=2) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(counter_karate)) {
          result = $rb_plus(result, " ＞ カウンターカラテ!!")};
      } else if ($truthy((m = ev_easy_pattern.$match(command)))) {
        
        self.$debug("ev easy: ", command);
        dice_cnt = m['$[]'](1);
        suc_rate = ($truthy($a = suc_rate) ? $a : m['$[]'](2));
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 3);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        counter_karate = false;
        if ($truthy(($truthy($a = suc_rate['$nil?']()['$!']()) ? $rb_gt(suc_cnt, suc_rate.$to_i()) : $a))) {
          
          self.$debug("counter karate: true");
          counter_karate = true;};
        result = $rb_plus(result, "" + "(" + (m['$[]'](1)) + "B6>=3) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(counter_karate)) {
          result = $rb_plus(result, " ＞ カウンターカラテ!!")};
      } else if ($truthy((m = ev_normal_pattern.$match(command)))) {
        
        self.$debug("ev normal: ", command);
        dice_cnt = m['$[]'](1);
        suc_rate = ($truthy($a = suc_rate) ? $a : m['$[]'](2));
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 4);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        counter_karate = false;
        if ($truthy(($truthy($a = suc_rate['$nil?']()['$!']()) ? $rb_gt(suc_cnt, suc_rate.$to_i()) : $a))) {
          
          self.$debug("counter karate: true");
          counter_karate = true;};
        result = $rb_plus(result, "" + "(" + (m['$[]'](1)) + "B6>=4) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(counter_karate)) {
          result = $rb_plus(result, " ＞ カウンターカラテ!!")};
      } else if ($truthy((m = ev_hard_pattern.$match(command)))) {
        
        self.$debug("ev hard: ", command);
        dice_cnt = m['$[]'](1);
        suc_rate = ($truthy($a = suc_rate) ? $a : m['$[]'](2));
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 5);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        counter_karate = false;
        if ($truthy(($truthy($a = suc_rate['$nil?']()['$!']()) ? $rb_gt(suc_cnt, suc_rate.$to_i()) : $a))) {
          
          self.$debug("counter karate: true");
          counter_karate = true;};
        result = $rb_plus(result, "" + "(" + (m['$[]'](1)) + "B6>=5) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(counter_karate)) {
          result = $rb_plus(result, " ＞ カウンターカラテ!!")};
      } else if ($truthy((m = ev_ultrahard_pattern.$match(command)))) {
        
        self.$debug("ev ultrahard: ", command);
        dice_cnt = m['$[]'](1);
        suc_rate = ($truthy($a = suc_rate) ? $a : m['$[]'](2));
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 6);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        counter_karate = false;
        if ($truthy(($truthy($a = suc_rate['$nil?']()['$!']()) ? $rb_gt(suc_cnt, suc_rate.$to_i()) : $a))) {
          
          self.$debug("counter karate: true");
          counter_karate = true;};
        result = $rb_plus(result, "" + "(" + (m['$[]'](1)) + "B6>=6) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(counter_karate)) {
          result = $rb_plus(result, " ＞ カウンターカラテ!!")};
      } else if ($truthy((m = ev_short_pattern.$match(command)))) {
        
        self.$debug("ev short: ", command);
        dice_cnt = m['$[]'](1);
        suc_rate = ($truthy($a = suc_rate) ? $a : m['$[]'](2));
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 4);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        counter_karate = false;
        if ($truthy(($truthy($a = suc_rate['$nil?']()['$!']()) ? $rb_gt(suc_cnt, suc_rate.$to_i()) : $a))) {
          
          self.$debug("counter karate: true");
          counter_karate = true;};
        result = $rb_plus(result, "" + "(" + (m['$[]'](1)) + "B6>=4) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(counter_karate)) {
          result = $rb_plus(result, " ＞ カウンターカラテ!!")};
      } else if ($truthy((m = at_kids_pattern.$match(command)))) {
        
        self.$debug("at kids: ", command);
        dice_cnt = m['$[]'](1);
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 2);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        satsubatsu = false;
        six_cnt = dice['$[]'](3);
        if ($truthy($rb_ge(six_cnt, 2))) {
          satsubatsu = true};
        result = $rb_plus(result, "" + "(" + (dice_cnt) + "B6>=2) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(satsubatsu)) {
          result = $rb_plus(result, " ＞ サツバツ!!")};
      } else if ($truthy((m = at_easy_pattern.$match(command)))) {
        
        self.$debug("at easy: ", command);
        dice_cnt = m['$[]'](1);
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 3);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        satsubatsu = false;
        six_cnt = dice['$[]'](3);
        if ($truthy($rb_ge(six_cnt, 2))) {
          satsubatsu = true};
        result = $rb_plus(result, "" + "(" + (dice_cnt) + "B6>=3) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(satsubatsu)) {
          result = $rb_plus(result, " ＞ サツバツ!!")};
      } else if ($truthy((m = at_normal_pattern.$match(command)))) {
        
        self.$debug("at normal: ", command);
        dice_cnt = m['$[]'](1);
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 4);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        satsubatsu = false;
        six_cnt = dice['$[]'](3);
        if ($truthy($rb_ge(six_cnt, 2))) {
          satsubatsu = true};
        result = $rb_plus(result, "" + "(" + (dice_cnt) + "B6>=4) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(satsubatsu)) {
          result = $rb_plus(result, " ＞ サツバツ!!")};
      } else if ($truthy((m = at_hard_pattern.$match(command)))) {
        
        self.$debug("at hard: ", command);
        dice_cnt = m['$[]'](1);
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 5);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        satsubatsu = false;
        six_cnt = dice['$[]'](3);
        if ($truthy($rb_ge(six_cnt, 2))) {
          satsubatsu = true};
        result = $rb_plus(result, "" + "(" + (dice_cnt) + "B6>=5) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(satsubatsu)) {
          result = $rb_plus(result, " ＞ サツバツ!!")};
      } else if ($truthy((m = at_ultrahard_pattern.$match(command)))) {
        
        self.$debug("at ultrahard: ", command);
        dice_cnt = m['$[]'](1);
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 6);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        satsubatsu = false;
        six_cnt = dice['$[]'](3);
        if ($truthy($rb_ge(six_cnt, 2))) {
          satsubatsu = true};
        result = $rb_plus(result, "" + "(" + (dice_cnt) + "B6>=6) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(satsubatsu)) {
          result = $rb_plus(result, " ＞ サツバツ!!")};
      } else if ($truthy((m = at_short_pattern.$match(command)))) {
        
        self.$debug("at short: ", command);
        dice_cnt = m['$[]'](1);
        dice = self.$roll(m['$[]'](1), 6, 0, 0, ">=", 4);
        dice_str = dice['$[]'](1);
        suc_cnt = dice['$[]'](5);
        satsubatsu = false;
        six_cnt = dice['$[]'](3);
        if ($truthy($rb_ge(six_cnt, 2))) {
          satsubatsu = true};
        result = $rb_plus(result, "" + "(" + (dice_cnt) + "B6>=4) ＞ " + (dice_str) + " ＞ 成功数" + (suc_cnt));
        if ($truthy(satsubatsu)) {
          result = $rb_plus(result, " ＞ サツバツ!!")};
        } else {
        
        self.$debug("rollDiceCommand else: ", command);
        result = nil;
      };
      return result;
    }, TMP_NinjaSlayer_rollDiceCommand_6.$$arity = 1), nil) && 'rollDiceCommand';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
